#!/usr/bin/env python3

# sudo pip3 install beautifulsoup4 requests lxml

from __future__ import print_function

from bs4 import BeautifulSoup
import cookiejar, cookies
import requests
import sys, os

def fetch_html(make, model):
    url = 'http://www.carolinapicknpull.com/inventory/?make=%s&model=%s&inventory-search=Search' % (make, model)

    # To handle cookies with requests, ignore the Requests documentation
    # that says to use a RequestCookieJar: that's apparently only for
    # setting cookies, not fetching them. Instead, use a Session:
    session = requests.Session()
    session.cookies.set('cpnp-location','10')
    #r = session.get(url)
    # Searches don't work the first time; the first time it just sets
    # a cookie, then the second time it actually works.
    r = session.get(url)

    #print (session.get(url))
    #cookies = requests.utils.cookiejar_from_dict(requests.utils.dict_from_cookiejar(session.cookies))
    #session.cookies.set('NID', 'abc', domain='.google.co.uk', path='/')

    return r.text

def do_search(soup, model):
    # case-insensitive search:
    model = model.lower()

    table = soup.find("table", class_="inventoryData")
    if not table:
        print("Nothing found")
        return None
    matches = []
    for tr in table.findAll("tr"):
        if tr.find('th'):
            # Save the values to use as keys
            keys = [ th.text for th in tr.findAll('th') ]
            continue

        vals = [ td.text for td in tr.findAll('td') ]

        if vals[1].lower() == model:
            matches.append(vals)

    return matches

if __name__ == '__main__':
    # Pass the desired make and model as arguments
    if len(sys.argv) < 3:
        print("Usage: %s make model" % os.path.basename(sys.argv[0]))
        sys.exit(1)
    make = sys.argv[1]
    model = sys.argv[2]
    html = fetch_html(make, model)
    soup = BeautifulSoup(html, 'lxml')
    matches = do_search(soup, model)
    if not matches:
        print("No matches")
        sys.exit(0)

    fmt = '%15s %10s %4s %6s %11s'
    print(fmt % ('Make', 'Model', 'Year', 'Row', 'Date-In'))
    for match in matches:
        print(fmt % tuple(match))
